// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `Instrumentation.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ICE_API_EXPORTS
#   define ICE_API_EXPORTS
#endif
#include <Ice/Instrumentation.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

}

Ice::Instrumentation::Observer::~Observer()
{
}

Ice::Instrumentation::ThreadObserver::~ThreadObserver()
{
}

Ice::Instrumentation::ConnectionObserver::~ConnectionObserver()
{
}

Ice::Instrumentation::DispatchObserver::~DispatchObserver()
{
}

Ice::Instrumentation::ChildInvocationObserver::~ChildInvocationObserver()
{
}

Ice::Instrumentation::RemoteObserver::~RemoteObserver()
{
}

Ice::Instrumentation::CollocatedObserver::~CollocatedObserver()
{
}

Ice::Instrumentation::InvocationObserver::~InvocationObserver()
{
}

Ice::Instrumentation::ObserverUpdater::~ObserverUpdater()
{
}

Ice::Instrumentation::CommunicatorObserver::~CommunicatorObserver()
{
}

#else // C++98 mapping

namespace
{

namespace
{

}

}

Ice::Instrumentation::Observer::~Observer()
{
}

ICE_API ::Ice::LocalObject* Ice::Instrumentation::upCast(::Ice::Instrumentation::Observer* p) { return p; }

Ice::Instrumentation::ThreadObserver::~ThreadObserver()
{
}

ICE_API ::Ice::LocalObject* Ice::Instrumentation::upCast(::Ice::Instrumentation::ThreadObserver* p) { return p; }

Ice::Instrumentation::ConnectionObserver::~ConnectionObserver()
{
}

ICE_API ::Ice::LocalObject* Ice::Instrumentation::upCast(::Ice::Instrumentation::ConnectionObserver* p) { return p; }

Ice::Instrumentation::DispatchObserver::~DispatchObserver()
{
}

ICE_API ::Ice::LocalObject* Ice::Instrumentation::upCast(::Ice::Instrumentation::DispatchObserver* p) { return p; }

Ice::Instrumentation::ChildInvocationObserver::~ChildInvocationObserver()
{
}

ICE_API ::Ice::LocalObject* Ice::Instrumentation::upCast(::Ice::Instrumentation::ChildInvocationObserver* p) { return p; }

Ice::Instrumentation::RemoteObserver::~RemoteObserver()
{
}

ICE_API ::Ice::LocalObject* Ice::Instrumentation::upCast(::Ice::Instrumentation::RemoteObserver* p) { return p; }

Ice::Instrumentation::CollocatedObserver::~CollocatedObserver()
{
}

ICE_API ::Ice::LocalObject* Ice::Instrumentation::upCast(::Ice::Instrumentation::CollocatedObserver* p) { return p; }

Ice::Instrumentation::InvocationObserver::~InvocationObserver()
{
}

ICE_API ::Ice::LocalObject* Ice::Instrumentation::upCast(::Ice::Instrumentation::InvocationObserver* p) { return p; }

Ice::Instrumentation::ObserverUpdater::~ObserverUpdater()
{
}

ICE_API ::Ice::LocalObject* Ice::Instrumentation::upCast(::Ice::Instrumentation::ObserverUpdater* p) { return p; }

Ice::Instrumentation::CommunicatorObserver::~CommunicatorObserver()
{
}

ICE_API ::Ice::LocalObject* Ice::Instrumentation::upCast(::Ice::Instrumentation::CommunicatorObserver* p) { return p; }

namespace Ice
{
}

#endif
